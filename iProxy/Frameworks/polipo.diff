diff -u polipo-20091115.orig/chunk.c polipo-20091115/chunk.c
--- polipo-20091115.orig/chunk.c	2009-12-12 20:43:56.000000000 +0100
+++ polipo-20091115/chunk.c	2010-09-25 23:03:33.000000000 +0200
@@ -320,7 +320,7 @@
     chunkArenas = malloc(numArenas * sizeof(ChunkArenaRec));
     if(chunkArenas == NULL) {
         do_log(L_ERROR, "Couldn't allocate chunk arenas.\n");
-        polipoExit();
+        polipo_exit();
     }
     for(i = 0; i < numArenas; i++) {
         chunkArenas[i].bitmap = EMPTY_BITMAP;
diff -u polipo-20091115.orig/client.c polipo-20091115/client.c
--- polipo-20091115.orig/client.c	2009-12-12 20:43:56.000000000 +0100
+++ polipo-20091115/client.c	2010-09-25 23:03:33.000000000 +0200
@@ -34,7 +34,7 @@
         newevent = schedule_accept(fd, httpAccept, NULL);
         if(newevent == NULL) {
             do_log(L_ERROR, "Couldn't schedule accept.\n");
-            polipoExit();
+            polipo_exit();
         }
     }
     return 1;
@@ -64,12 +64,12 @@
                                           sizeof(request->fd), &request->fd);
                 if(!again) {
                     do_log(L_ERROR, "Couldn't schedule accept -- aborting.\n");
-                    polipoExit();
+                    polipo_exit();
                 }
             }
             return 1;
         } else {
-            polipoExit();
+            polipo_exit();
             return 1;
         }
     }
@@ -306,7 +306,7 @@
         if(!handler) {
             do_log(L_ERROR, 
                    "Couldn't schedule delayed shutdown -- aborting.\n");
-            polipoExit();
+            polipo_exit();
         }
     }
     return 1;
diff -u polipo-20091115.orig/event.c polipo-20091115/event.c
--- polipo-20091115.orig/event.c	2009-12-12 20:43:56.000000000 +0100
+++ polipo-20091115/event.c	2010-09-25 23:03:33.000000000 +0200
@@ -43,6 +43,8 @@
 
 static int fds_invalid = 0;
 
+static int exit_pipe[2] = {0,0};
+
 static inline int
 timeval_cmp(struct timeval *t1, struct timeval *t2)
 {
@@ -141,6 +143,13 @@
     poll_fds = NULL;
     fdEvents = NULL;
     fdEventsLast = NULL;
+
+    if (pipe(exit_pipe) != 0) {
+        fprintf(stderr, "Could not create exit pipe\n");
+        return;
+    }
+
+    allocateFdEventNum(exit_pipe[0]);
 }
 
 void
@@ -180,6 +189,9 @@
     sa.sa_flags = 0;
     sigaction(SIGUSR2, &sa, NULL);
 #endif
+
+    close(exit_pipe[0]);
+    close(exit_pipe[1]);
 }
 
 #ifdef HAVE_FORK
@@ -627,6 +639,8 @@
     FdEventHandlerPtr event;
     int fd0;
 
+    exitFlag = 0;
+    
     gettimeofday(&current_time, NULL);
 
     while(1) {
@@ -827,8 +841,12 @@
     in_signalCondition--;
 }
 
+// -----------------
+
 void
-polipoExit()
+polipo_exit()
 {
     exitFlag = 3;
-}
+    char c = 0;
+    write(exit_pipe[1], &c, 1);
+}
\ No newline at end of file
diff -u polipo-20091115.orig/event.h polipo-20091115/event.h
--- polipo-20091115.orig/event.h	2009-12-12 20:43:56.000000000 +0100
+++ polipo-20091115/event.h	2010-09-25 23:03:33.000000000 +0200
@@ -85,4 +85,4 @@
               int dsize, void *data);
 void unregisterConditionHandler(ConditionHandlerPtr);
 void abortConditionHandler(ConditionHandlerPtr);
-void polipoExit(void);
+void polipo_exit(void);
diff -u polipo-20091115.orig/io.c polipo-20091115/io.c
--- polipo-20091115.orig/io.c	2009-12-12 20:43:56.000000000 +0100
+++ polipo-20091115/io.c	2010-09-25 23:03:33.000000000 +0200
@@ -788,7 +788,7 @@
         return NULL;
     }
 
-    do_log(L_INFO, "Established listening socket on port %d.\n", port);
+    // do_log(L_INFO, "Established listening socket on port %d.\n", port);
 
     return schedule_accept(fd, handler, data);
 }
diff -u polipo-20091115.orig/local.c polipo-20091115/local.c
--- polipo-20091115.orig/local.c	2009-12-12 20:43:56.000000000 +0100
+++ polipo-20091115/local.c	2010-09-25 23:03:33.000000000 +0200
@@ -541,7 +541,7 @@
         } while (rc < 0 && errno == EINTR);
         if(rc < 0) {
             do_log_error(L_ERROR, errno, "Couldn't restore signal mask");
-            polipoExit();
+            polipo_exit();
         }
         return;
     }
@@ -554,7 +554,7 @@
         } while (rc < 0 && errno == EINTR);
         if(rc < 0) {
             do_log_error(L_ERROR, errno, "Couldn't restore signal mask");
-            polipoExit();
+            polipo_exit();
             return;
         }
 
diff -u polipo-20091115.orig/main.c polipo-20091115/main.c
--- polipo-20091115.orig/main.c	2009-12-12 20:43:56.000000000 +0100
+++ polipo-20091115/main.c	2010-09-25 23:03:33.000000000 +0200
@@ -38,14 +38,20 @@
     fprintf(stderr, "  -c: specify the configuration file to use.\n");
 }
 
+extern ConfigVariablePtr configVariables;
+
 int
-main(int argc, char **argv)
+polipo_main(int argc, char **argv)
 {
     FdEventHandlerPtr listener;
     int i;
     int rc;
     int expire = 0, printConfig = 0;
 
+    configFile = NULL;
+    pidFile = NULL;
+    configVariables = NULL;
+
     initAtoms();
     CONFIG_VARIABLE(daemonise, CONFIG_BOOLEAN, "Run as a daemon");
     CONFIG_VARIABLE(pidFile, CONFIG_ATOM, "File with pid of running daemon.");
@@ -163,7 +169,9 @@
     }
 
     eventLoop();
+    
+    close(listener->fd);
 
     if(pidFile) unlink(pidFile->string);
     return 0;
-}
+}
\ No newline at end of file
diff -u polipo-20091115.orig/md5.h polipo-20091115/md5.h
--- polipo-20091115.orig/md5.h	2009-12-12 20:43:56.000000000 +0100
+++ polipo-20091115/md5.h	2010-09-25 23:03:33.000000000 +0200
@@ -40,6 +40,7 @@
 
 /* typedef a 32-bit type */
 typedef uint32_t UINT4;
+//typedef unsigned int UINT4;
 
 /* Data structure for MD5 (Message-Digest) computation */
 typedef struct {
diff -u polipo-20091115.orig/server.c polipo-20091115/server.c
--- polipo-20091115.orig/server.c	2009-12-12 20:43:56.000000000 +0100
+++ polipo-20091115/server.c	2010-09-25 23:03:33.000000000 +0200
@@ -159,7 +159,7 @@
                           expireServersHandler, 0, NULL);
     if(!e) {
         do_log(L_ERROR, "Couldn't schedule server expiry.\n");
-        polipoExit();
+        polipo_exit();
     }
     return 1;
 }
@@ -1359,7 +1359,7 @@
         if(!handler) {
             do_log(L_ERROR,
                    "Couldn't schedule delayed finish -- aborting.\n");
-            polipoExit();
+            polipo_exit();
         }
     }
 }
